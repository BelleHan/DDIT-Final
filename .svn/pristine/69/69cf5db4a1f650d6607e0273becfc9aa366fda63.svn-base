package kr.or.fms.logis.controller;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import kr.or.fms.command.SearchCriteria;
import kr.or.fms.hq.dto.OutVO;
import kr.or.fms.hq.service.InOutService;

@Controller
@RequestMapping("/logis")
public class LogisOutCotroller {

	@Autowired
	InOutService inOutService;

	@RequestMapping(value = "/out", method = RequestMethod.GET)
	public ModelAndView out(SearchCriteria cri, ModelAndView mnv) throws SQLException {
		String url = "logis/out/list";
		cri.setPerPageNum(10);
		Map<String, Object> dataMap = inOutService.getOutTakingList(cri);

		mnv.addAllObjects(dataMap);
		mnv.setViewName(url);

		return mnv;
	}

	@ResponseBody
	@RequestMapping(value = "/inout/search.do", method = RequestMethod.POST)
	public ResponseEntity<Map<String, Object>> outSearchTaking(@RequestBody Map<String, String> data)
			throws SQLException {

		ResponseEntity<Map<String, Object>> entity = null;
		SearchCriteria criMap = new SearchCriteria();

		criMap.setKeywordMap(data);
		criMap.setPage(data.get("page"));
		criMap.setPerPageNum(10);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			dataMap = inOutService.getOutTakingSearchList(criMap);

			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);
		} catch (SQLException e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return entity;
	}

	@ResponseBody
	@RequestMapping(value = "/inout/outtakingdetail", method = RequestMethod.POST)
	public ResponseEntity<List<OutVO>> outTakingDetail(@RequestBody String ocode) throws SQLException {
		System.out.println(ocode);
		ocode = ocode.substring(0, 6);
		System.out.println(ocode);
		ResponseEntity<List<OutVO>> entity = null;
		try {

			List<OutVO> outDetail = inOutService.getOutTakingDetail(ocode);

			entity = new ResponseEntity<List<OutVO>>(outDetail, HttpStatus.OK);
		} catch (SQLException e) {
			e.printStackTrace();
			entity = new ResponseEntity<List<OutVO>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return entity;
	}

}
