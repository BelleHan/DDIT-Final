package kr.or.fms.logis.security;

import java.sql.SQLException;

import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetails;

import kr.or.fms.logis.dao.LogisDAO;
import kr.or.fms.logis.dto.LogisVO;

public class CustomAuthenticationProvider implements AuthenticationProvider {

	private LogisDAO logisDAO;
	public void setLogisDAO(LogisDAO logisDAO) {
		this.logisDAO = logisDAO;
	}

	@Override
	public Authentication authenticate(Authentication auth) throws AuthenticationException {
		// 인증을 거치지 않은 authentication
		//로그인 성공시 loginuser를 만들어
		String login_id = (String) auth.getPrincipal(); //로그인 시도한 id를 가져온다
		String login_pwd = (String) auth.getCredentials(); //로그인 시도한 password를 가져온다
		
		LogisVO logis = null;
		try {
			logis = logisDAO.selectLogisByCode(login_id);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new AuthenticationServiceException("Internal sever error!"); //sql exception
		}
		
		if(logis != null) {
			if(login_pwd.equals(logis.getLogis_pwd())) {
				UserDetails authUser = new UserLogis(logis);
				
				UsernamePasswordAuthenticationToken result = new UsernamePasswordAuthenticationToken(authUser.getUsername(),
						authUser.getPassword());
				
				result.setDetails(authUser);
				return result;
			
			}else {
				throw new BadCredentialsException("패스워드가 일치하지않습니다.");
			}
		}else {
			throw new BadCredentialsException("존재하지 않는 아이디입니다.");
		}
	}	

	@Override
	public boolean supports(Class<?> auth) {
		return auth.equals(UsernamePasswordAuthenticationToken.class);
	}

}
