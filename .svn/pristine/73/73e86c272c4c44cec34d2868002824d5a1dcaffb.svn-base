<%@ page language="java" contentType="text/html; charset=UTF-8"
   pageEncoding="UTF-8"%>
<%@ page trimDirectiveWhitespaces="true"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>

<c:set var="now" value="<%=new java.util.Date()%>" />
<c:set var="sysYear">
   <fmt:formatDate value="${now}" pattern="MM" />
</c:set>

<head>
<style>
   .row{
      border: 1px solid black;
   }
</style>
<body>
   
   <!-- 정보차트 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
	<div class="col-md-4 col-12">
		<p>가맹점 재고 순환율</p>
		<div class="info-box">
			<div class="info-box-content">
				<canvas id="deptChart" width="400" height="400"></canvas>
				<script>
					var ctx = document.getElementById("deptChart");
					var deptChart = new Chart(
							ctx,
							{ //차트 선언
								type : 'bar', //차트타입
								data : { //차트 데이터 object 배열
									labels : [ "1월", "2월", "3월", "4월", "5월" ], //라벨 배열
									datasets : [ { //데이터 object 배열
										label : [ 'a', 'b' ],
										data : [ 15, 19, 3, 5, 2, 9 ],
										backgroundColor : [ 'rgba(255, 99, 132, 0.2)' ],
										borderColor : [ 'rgba(255, 99, 132, 1)' ],
										borderWidth : 1
									} ]
								},
								options : { //옵션: 추가하고 싶은 옵션이 있을때 사용
									scales : {
										yAxes : [ { //y축에 관련된 옵션 (x축일 경우: xAxes)
											ticks : {
												beginAtZero : true
											//데이터 표기를 '0'부터 표기한다.
											}
										} ]
									}
								}
							});
				</script>
			</div>
		</div>
		<div class="info-box">
			<div data-v-365c20ab="" class="chart-view">
				<canvas width="880" height="440" style="display: block; box-sizing: border-box; height: 440px; width: 880px;"></canvas>
			</div>
			<script>
			const actions = [
				  {
				    name: 'Randomize',
				    handler(chart) {
				      chart.data.datasets.forEach(dataset => {
				        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
				      });
				      chart.update();
				    }
				  },
				  {
				    name: 'Add Dataset',
				    handler(chart) {
				      const data = chart.data;
				      const dsColor = Utils.namedColor(chart.data.datasets.length);
				      const newDataset = {
				        label: 'Dataset ' + (data.datasets.length + 1),
				        backgroundColor: Utils.transparentize(dsColor, 0.5),
				        borderColor: dsColor,
				        borderWidth: 1,
				        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
				      };
				      chart.data.datasets.push(newDataset);
				      chart.update();
				    }
				  },
				  {
				    name: 'Add Data',
				    handler(chart) {
				      const data = chart.data;
				      if (data.datasets.length > 0) {
				        data.labels = Utils.months({count: data.labels.length + 1});

				        for (let index = 0; index < data.datasets.length; ++index) {
				          data.datasets[index].data.push(Utils.rand(-100, 100));
				        }

				        chart.update();
				      }
				    }
				  },
				  {
				    name: 'Remove Dataset',
				    handler(chart) {
				      chart.data.datasets.pop();
				      chart.update();
				    }
				  },
				  {
				    name: 'Remove Data',
				    handler(chart) {
				      chart.data.labels.splice(-1, 1); // remove the label first

				      chart.data.datasets.forEach(dataset => {
				        dataset.data.pop();
				      });

				      chart.update();
				    }
				  }
				];
				// </block:actions>

				// <block:setup:1>
				const DATA_COUNT = 7;
				const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

				const labels = Utils.months({count: 7});
				const data = {
				  labels: labels,
				  datasets: [
				    {
				      label: 'Dataset 1',
				      data: Utils.numbers(NUMBER_CFG),
				      borderColor: Utils.CHART_COLORS.red,
				      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
				    },
				    {
				      label: 'Dataset 2',
				      data: Utils.numbers(NUMBER_CFG),
				      borderColor: Utils.CHART_COLORS.blue,
				      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
				    }
				  ]
				};
				// </block:setup>

				// <block:config:0>
				const config = {
				  type: 'bar',
				  data: data,
				  options: {
				    responsive: true,
				    plugins: {
				      legend: {
				        position: 'top',
				      },
				      title: {
				        display: true,
				        text: 'Chart.js Bar Chart'
				      }
				    }
				  },
				};
				// </block:config>

				module.exports = {
				  actions: actions,
				  config: config,
				};
			</script>
		</div>
	</div>
</body>