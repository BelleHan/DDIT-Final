package kr.or.fms.controller;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.fms.command.FranModifyCommand;
import kr.or.fms.command.PageMaker;
import kr.or.fms.command.SearchCriteria;
import kr.or.fms.dto.MenuVO;
import kr.or.fms.exception.InvalidPasswordException;
import kr.or.fms.exception.NotFoundIdException;
import kr.or.fms.fran.dto.FranVO;
import kr.or.fms.hq.command.LogisModifyCommand;
import kr.or.fms.hq.service.ComListService;
import kr.or.fms.hq.service.EmpService;
import kr.or.fms.logis.dto.LogisVO;
import kr.or.fms.service.MenuService;
import kr.or.fms.sup.dto.SupVO;

/**
 * Handles requests for the application home page.
 */
@Controller
@RequestMapping("/hq")
public class HqController {
	@Autowired
	MenuService menuService;
	
	@Autowired
	EmpService empService;
	
	@Autowired
	ComListService comListService;

	private static final Logger logger = LoggerFactory.getLogger(HqController.class);
	
	@RequestMapping(value="/com/franmodify.do", method=RequestMethod.POST)
	public String franModify(FranModifyCommand modifyReq, RedirectAttributes rttr, HttpServletRequest request) throws Exception {
		String url = "redirect:/hq/com/frandetail.do";
		
		FranVO fran = modifyReq.toFranVO();
		
		comListService.modifyFran(fran);
		
		return url;
	}
	
	@RequestMapping("/com/logismodify.do")
	public String logisModify(LogisModifyCommand modifyReq, RedirectAttributes rttr, HttpServletRequest request) throws Exception {
		String url = "redirect:/hq/logisdetail.do";
		
		LogisVO logis = modifyReq.toLogisVO();
		comListService.modifyLogis(logis);
		
		return url;
	}
//	@RequestMapping("/com/supmodify.do")
//	public String supModify(SupModifyCommand  modifyReq, RedirectAttributes rttr, HttpServletRequest request) throws Exception {
//		String url = "redirect:/hq/supdetail.do";
//		
//		SupVO sup = modifyReq.toSupVO();
//		comListService.modifySup(sup);
//		
//		return url;
//	}
	
	@RequestMapping("/com/franmodifyForm.do")
	public ModelAndView FranModifyForm(String fcode, ModelAndView mnv) throws Exception {
		String url = "hq/Fran_modify";
		
		FranVO fran = comListService.getFranForModify(fcode);
		
		mnv.addObject("fran", fran);
		mnv.setViewName(url);
		
		return mnv;
	}
//	@RequestMapping("/com/supmodifyForm.do")
//	public ModelAndView SupModifyForm(String scode, ModelAndView mnv) throws Exception {
//		String url = "hq/Sup_modify";
//		
//		 SupVO sup = comListService.getSupForModify(scode);
//		
//		mnv.addObject("sup", sup);
//		mnv.setViewName(url);
//		
//		return mnv;
//	}
	@RequestMapping("/com/frandetail.do")
	public ModelAndView Frandetail(String fcode, @RequestParam(defaultValue="")String from, HttpServletRequest request, ModelAndView mnv) throws SQLException {
		
		String url = "hq/Fran_detail";
		
		FranVO fran = null;
		
		fran = comListService.getFran(fcode);
		
		mnv.addObject("fran", fran);
		mnv.setViewName(url);
		
		return mnv;
		
	}
	@RequestMapping("/com/logisdetail.do")
	public ModelAndView Logisdetail(String lcode, HttpServletRequest request, ModelAndView mnv) throws SQLException {
		
		String url = "hq/logis_detail";
		
		LogisVO logis = null;
		
		logis = comListService.getLogis(lcode);
		System.out.println(logis.getLogis_name());
		
		mnv.addObject("logis", logis);
		mnv.setViewName(url);
		
		return mnv;
		
	}
//	@RequestMapping("/com/supdetail.do")
//	public ModelAndView supdetail(String scode, @RequestParam(defaultValue="")String from, HttpServletRequest request, ModelAndView mnv) throws SQLException {
//		
//		String url = "hq/Sup_detail";
//		
//		SupVO sup = null;
//		
//		sup = comListService.GetSup(scode);
//		
//		mnv.addObject("sup", sup);
//		mnv.setViewName(url);
//		
//		return mnv;
//		
//	}
	
	@RequestMapping(value = "/com/list", method = RequestMethod.GET)
	public ModelAndView comList(SearchCriteria cri, ModelAndView mnv) throws SQLException {
		String url = "hq/FLS_list";

		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> franMap = comListService.getFranList(cri);
		List<FranVO> franList= (List<FranVO>) franMap.get("franList");
		PageMaker pageMaker1 = (PageMaker) franMap.get("pageMaker1");
		
		Map<String, Object> logisMap = comListService.getLogisList(cri);
		List<LogisVO> logisList= (List<LogisVO>) logisMap.get("logisList");
		PageMaker pageMaker2 = (PageMaker) logisMap.get("pageMaker2");
		
		Map<String, Object> supMap = comListService.getSupList(cri);
		List<SupVO> supList= (List<SupVO>) supMap.get("supList");
		PageMaker pageMaker3 = (PageMaker) logisMap.get("pageMaker3");
		
		dataMap.put("franList", franList);
		dataMap.put("pageMaker1", pageMaker1);
		dataMap.put("logisList", logisList);
		dataMap.put("pageMaker2", pageMaker2);
		dataMap.put("supList", supList);
		dataMap.put("pageMaker3", pageMaker3);
		mnv.addAllObjects(dataMap);
		mnv.setViewName(url);
		
		return mnv;
	}
	
	@RequestMapping(value = "/index.do", method = RequestMethod.GET)
	public String home(Model model) {
		String url = "hq/index_hq";
		try {
			List<MenuVO> menuList = menuService.getMainMenuList();
			model.addAttribute("menuList", menuList);
		} catch (SQLException e) {
			e.printStackTrace();
			url = null;
		}
		
		return url;
	}
	
	@RequestMapping(value="/login", method=RequestMethod.POST)
	public String Login(String code, String pwd, HttpSession session, HttpServletRequest request) throws Exception {
		String url = "redirect:index.do";
		
		try {
			
			empService.login(code, pwd);
			//로그인 성공시
			session.setAttribute("loginUser", empService.getEmp(code));
			session.setMaxInactiveInterval(20*60);
			
		} catch (SQLException e) {
			e.printStackTrace();
			throw e; 
		} catch (NotFoundIdException | InvalidPasswordException e) {
			request.setAttribute("message", e.getMessage());
			url = "common/loginFail";
		} 
		return url;
	}
	
	@RequestMapping(value = "/main.do", method = RequestMethod.GET)
	public String main(Model model) {
		String url = "hq/hqhome";
		return url;
	}
	@RequestMapping(value = "/stock/detail", method = RequestMethod.GET)
	public String stock(Model model) {
		String url = "hq/index_hq2";
		try {
			List<MenuVO> menuList = menuService.getMainMenuList();
			model.addAttribute("menuList", menuList);
		} catch (SQLException e) {
			e.printStackTrace();
			url = null;
		}
		
		return url;
	}
	
	@RequestMapping(value = "/logout.do", method = RequestMethod.GET)
	public String logout(HttpSession session) {
		String url = "redirect:/";
		session.invalidate();

		return url;
	}
	
	
	@RequestMapping(value = "/common/loginForm", method = RequestMethod.GET)
	public String loginForm(@RequestParam(defaultValue="")String error, HttpServletResponse response) {
		String url = "common/loginForm";
		if (error.equals("1")) {
			response.setStatus(302);
		}
		return url;
	}
	
	
	
}